#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
know_you_once.py
~~~~~~~~~~~~~~~~
Получает единичный «факт дня» из случайной предметной области
(выбранной из большого списка тегов) и показывает всплывающее окно
«Знаете ли вы, что…». Работает с openai-python ≥ 1.0.

• Каждый запуск → новый тег → новая тема факта.
• Nonce-токен в конце промпта уменьшает риск повторов даже при
  одинаковом теге.
"""

import os
import random
import secrets
import tkinter as tk
from tkinter import messagebox
from openai import OpenAI          # pip install --upgrade openai>=1.0

# ────────── настройки ──────────
MODEL_NAME   = "gpt-4o-mini"      # замените на "o3", когда будет доступ
TEMPERATURE  = 0.9
TIMEOUT_MS   = 10_000             # авто-закрытие окна (мс)

TOPIC_POOL = [
    # естественные науки
    "астрономия", "космология", "планетология", "физика частиц", "квантовая механика",
    "оптика", "акустика", "термодинамика", "материалы", "химия неорганическая",
    "органическая химия", "биохимия", "генетика", "микробиология", "иммунология",
    "неврология", "биология растений", "зоология", "экология", "этология",
    "эволюционная биология", "медицина", "кардиология", "фармацевтика", "психология",
    "психиатрия", "климатология", "метеорология", "океанология", "геология",
    "сейсмология", "вулканология", "минералогия", "география", "картография",
    "гидрология", "гидродинамика", "астрофизика", "астрофотометрия", "радиоастрономия",
    # математика и логика
    "математический анализ", "алгебра", "топология", "теория чисел", "статистика",
    "теория вероятностей", "криптография", "логика", "теория игр", "комбинаторика",
    "геометрия", "фракталы", "вычислительная математика",
    # инженерия и технологии
    "робототехника", "искусственный интеллект", "машинное обучение", "квантовые вычисления",
    "нанотехнологии", "ядерная энергетика", "возобновляемая энергетика", "аэронавтика",
    "авиация", "космические технологии", "автономные автомобили", "3D-печать",
    "материаловедение", "биотехнологии", "генной инженерия", "интернет вещей",
    "кибербезопасность", "блокчейн", "сетевые технологии", "протоколы связи",
    "микроэлектроника", "оптоэлектроника", "телекоммуникации",
    # история и археология
    "первобытная история", "Месопотамия", "Шумер", "Древний Китай", "Древняя Индия",
    "Античная Греция", "Древний Рим", "средневековая Европа", "византийская история",
    "Великие географические открытия", "эпоха Возрождения", "Новая история Японии",
    "Индустриальная революция", "холодная война", "космическая гонка", "современная история",
    "военная история", "история науки", "археология Америк", "майя", "инков", "витинги",
    # культура и гуманитарные
    "лингвистика", "семиотика", "этнография", "антропология", "мифология",
    "искусствоведение", "живопись", "скульптура", "музыка классическая", "джаз",
    "кинематограф", "фотография", "архитектура", "дизайн", "философия античная",
    "современная философия", "эстетика", "этика", "религиоведение", "политология",
    "экономика", "макроэкономика", "поведенческая экономика", "социология",
    "право", "криминология", "история техники", "история медицины",
    # прикладное и разное
    "спортивная наука", "пищевые технологии", "эргономика", "графический дизайн",
    "металлургия", "логистика", "агрономия", "виноделие", "пчеловодство",
    "краеведение", "урбанистика", "демография", "палеонтология", "орнитология",
    "энтомология", "герпетология", "ихтиология", "астробиология",
]

client = OpenAI()                 # берёт OPENAI_API_KEY из окружения


# ────────── функции ──────────
def fetch_fact() -> str:
    """Возвращает один факт в случайной предметной области + nonce."""
    topic = random.choice(TOPIC_POOL)
    nonce = secrets.token_urlsafe(10)

    prompt = (
        f"Выбери один интересный факт из области «{topic}» и сформулируй его "
        "точно в одном-двух предложениях, начиная фразой "
        "«Знаете ли вы, что ...». Не упоминай тему явно, не добавляй источников.\n\n"
        f"<RANDOM_NONCE>{nonce}</RANDOM_NONCE>"
    )

    response = client.chat.completions.create(
        model=MODEL_NAME,
        messages=[{"role": "system", "content": prompt}],
        temperature=TEMPERATURE,
    )
    return response.choices[0].message.content.strip()


def show_popup(text: str):
    """Показывает окно с фактом и закрывает его через TIMEOUT_MS."""
    root = tk.Tk()
    root.withdraw()
    root.after(TIMEOUT_MS, root.destroy)
    messagebox.showinfo("Знаете ли вы, что...", text, parent=root)


# ────────── точка входа ──────────
if __name__ == "__main__":
    try:
        fact = fetch_fact()
        show_popup(fact)
    except Exception as exc:
        print("Ошибка:", exc)
